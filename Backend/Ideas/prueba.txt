{
    'main.py': "from fastapi import FastAPI, HTTPException, Depends
from sqlalchemy import create_engine, Column, Integer, String, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship, Session
from pydantic import BaseModel

DATABASE_URL = 'sqlite:///./test.db'

engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

app = FastAPI()

class Tabla1(Base):
    __tablename__ = 'tabla1'
    id = Column(Integer, primary_key=True, index=True)
    edad = Column(String, nullable=True)

class Tabla2(Base):
 
   __tablename__ = 'tabla2'
    id = Column(Integer, primary_key=True, index=True)
    id_fk = Column(Integer, ForeignKey('tabla1.id'), nullable=False)
    tabla1_rel = relationship('Tabla1')

Base.metadata.create_all(bind=engine)

class Tabla1Create(BaseModel):
    edad: str

class Tabla2Create(BaseModel):
    id_fk: int

@app.post('/tabla1/', response_model=Tabla1Create)
async def create_tabla1(tabla1: Tabla1Create, db: Session = Depends(get_db)):
    db_tabla1 = Tabla1(edad=tabla1.edad)
    db.add(db_tabla1)
    db.commit()
    db.refresh(db_tabla1)
    return db_tabla1

@app.post('/tabla2/', response_model=Tabla2Create)
async def create_tabla2(tabla2: Tabla2Create, db: Session = Depends(get_db)):
    db_tabla2 = Tabla2(id_fk=tabla2.id_fk)
    db.add(db_tabla2)
    db.commit()
    db.refresh(db_tabla2)
    return db_tabla2

@app.get('/tabla1/{id}', response_model=Tabla1Create)
async def read_tabla1(id: int, db: Session = Depends(get_db)):
    db_tabla1 = db.query(Tabla1).filter(Tabla1.id == id).first()
   
 if db_tabla1 is None:
        raise HTTPException(status_code=404, detail='Tabla1 not found')
    return db_tabla1

@app.get('/tabla2/{id}', response_model=Tabla2Create)
async def read_tabla2(id: int, db: Session = Depends(get_db)):
    db_tabla2 = db.query(Tabla2).filter(Tabla2.id == id).first()
    if db_tabla2 is None:
        raise HTTPException(status_code=404, detail='Tabla2 not found')
    return db_tabla2

@app.put('/tabla1/{id}', response_model=Tabla1Create)
async def update_tabla1(id: int, tabla1: Tabla1Create, db: Session = Depends(get_db)):
   
 db_tabla1 = db.query(Tabla1).filter(Tabla1.id == id).first()
    if db_tabla1 is None:
      
  raise HTTPException(status_code=404, detail='Tabla1 not found')
    db_tabla1.edad = tabla1.edad
    db.commit()
    db.refresh(db_tabla1)
    return db_tabla1

@app.put('/tabla2/{id}', response_model=Tabla2Create)
async def update_tabla2(id: int, tabla2: Tabla2Create, db: Session = Depends(get_db)):
    db_tabla2 = db.query(Tabla2).filter(Tabla2.id == id).first()
    if db_tabla2 is None:
        raise HTTPException(status_code=404, detail='Tabla2 not found')
  
  db_tabla2.id_fk = tabla2.id_fk
    db.commit()
    db.refresh(db_tabla2)
    return db_tabla2

@app.delete('/tabla1/{id}', response_model=Tabla1Create)
async def delete_tabla1(id: int, db: Session = Depends(get_db)):
    db_tabla1 = db.query(Tabla1).filter(Tabla1.id == id).first()
    if db_tabla1 is None:
        raise HTTPException(status_code=404, detail='Tabla1 not found')
    db.delete(db_tabla1)
    db.commit()
    return db_tabla1

@app.delete('/tabla2/{id}', response_model=Tabla2Create)
async def delete_tabla2(id: int, db: Session = Depends(get_db)):
    db_tabla2 = db.query(Tabla2).filter(Tabla2.id == id).first()
    if db_tabla2 is None:
        raise HTTPException(status_code=404, detail='Tabla2 not found')
    db.delete(db_tabla2)
    db.commit()
    return db_tabla2


def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
"}